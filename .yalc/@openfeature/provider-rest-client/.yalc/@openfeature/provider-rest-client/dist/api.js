"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenFeature Provider REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringFlagResolutionApi = exports.StringFlagResolutionApiFactory = exports.StringFlagResolutionApiFp = exports.StringFlagResolutionApiAxiosParamCreator = exports.ObjectFlagResolutionApi = exports.ObjectFlagResolutionApiFactory = exports.ObjectFlagResolutionApiFp = exports.ObjectFlagResolutionApiAxiosParamCreator = exports.NumericFlagResolutionApi = exports.NumericFlagResolutionApiFactory = exports.NumericFlagResolutionApiFp = exports.NumericFlagResolutionApiAxiosParamCreator = exports.BooleanFlagResolutionApi = exports.BooleanFlagResolutionApiFactory = exports.BooleanFlagResolutionApiFp = exports.BooleanFlagResolutionApiAxiosParamCreator = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
/**
 * BooleanFlagResolutionApi - axios parameter creator
 * @export
 */
var BooleanFlagResolutionApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {boolean} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveBoolean: function (flagKey, defaultValue, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'flagKey' is not null or undefined
                    (0, common_1.assertParamExists)('resolveBoolean', 'flagKey', flagKey);
                    // verify required parameter 'defaultValue' is not null or undefined
                    (0, common_1.assertParamExists)('resolveBoolean', 'defaultValue', defaultValue);
                    localVarPath = "/flags/{flag-key}/resolve/boolean"
                        .replace("{".concat("flag-key", "}"), encodeURIComponent(String(flagKey)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (defaultValue !== undefined) {
                        localVarQueryParameter['default-value'] = defaultValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BooleanFlagResolutionApiAxiosParamCreator = BooleanFlagResolutionApiAxiosParamCreator;
/**
 * BooleanFlagResolutionApi - functional programming interface
 * @export
 */
var BooleanFlagResolutionApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BooleanFlagResolutionApiAxiosParamCreator)(configuration);
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {boolean} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveBoolean: function (flagKey, defaultValue, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.resolveBoolean(flagKey, defaultValue, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.BooleanFlagResolutionApiFp = BooleanFlagResolutionApiFp;
/**
 * BooleanFlagResolutionApi - factory interface
 * @export
 */
var BooleanFlagResolutionApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BooleanFlagResolutionApiFp)(configuration);
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {boolean} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveBoolean: function (flagKey, defaultValue, requestBody, options) {
            return localVarFp.resolveBoolean(flagKey, defaultValue, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BooleanFlagResolutionApiFactory = BooleanFlagResolutionApiFactory;
/**
 * BooleanFlagResolutionApi - object-oriented interface
 * @export
 * @class BooleanFlagResolutionApi
 * @extends {BaseAPI}
 */
var BooleanFlagResolutionApi = /** @class */ (function (_super) {
    __extends(BooleanFlagResolutionApi, _super);
    function BooleanFlagResolutionApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {boolean} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooleanFlagResolutionApi
     */
    BooleanFlagResolutionApi.prototype.resolveBoolean = function (flagKey, defaultValue, requestBody, options) {
        var _this = this;
        return (0, exports.BooleanFlagResolutionApiFp)(this.configuration).resolveBoolean(flagKey, defaultValue, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BooleanFlagResolutionApi;
}(base_1.BaseAPI));
exports.BooleanFlagResolutionApi = BooleanFlagResolutionApi;
/**
 * NumericFlagResolutionApi - axios parameter creator
 * @export
 */
var NumericFlagResolutionApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {number} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveNumber: function (flagKey, defaultValue, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'flagKey' is not null or undefined
                    (0, common_1.assertParamExists)('resolveNumber', 'flagKey', flagKey);
                    // verify required parameter 'defaultValue' is not null or undefined
                    (0, common_1.assertParamExists)('resolveNumber', 'defaultValue', defaultValue);
                    localVarPath = "/flags/{flag-key}/resolve/number"
                        .replace("{".concat("flag-key", "}"), encodeURIComponent(String(flagKey)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (defaultValue !== undefined) {
                        localVarQueryParameter['default-value'] = defaultValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.NumericFlagResolutionApiAxiosParamCreator = NumericFlagResolutionApiAxiosParamCreator;
/**
 * NumericFlagResolutionApi - functional programming interface
 * @export
 */
var NumericFlagResolutionApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.NumericFlagResolutionApiAxiosParamCreator)(configuration);
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {number} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveNumber: function (flagKey, defaultValue, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.resolveNumber(flagKey, defaultValue, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.NumericFlagResolutionApiFp = NumericFlagResolutionApiFp;
/**
 * NumericFlagResolutionApi - factory interface
 * @export
 */
var NumericFlagResolutionApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.NumericFlagResolutionApiFp)(configuration);
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {number} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveNumber: function (flagKey, defaultValue, requestBody, options) {
            return localVarFp.resolveNumber(flagKey, defaultValue, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.NumericFlagResolutionApiFactory = NumericFlagResolutionApiFactory;
/**
 * NumericFlagResolutionApi - object-oriented interface
 * @export
 * @class NumericFlagResolutionApi
 * @extends {BaseAPI}
 */
var NumericFlagResolutionApi = /** @class */ (function (_super) {
    __extends(NumericFlagResolutionApi, _super);
    function NumericFlagResolutionApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {number} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NumericFlagResolutionApi
     */
    NumericFlagResolutionApi.prototype.resolveNumber = function (flagKey, defaultValue, requestBody, options) {
        var _this = this;
        return (0, exports.NumericFlagResolutionApiFp)(this.configuration).resolveNumber(flagKey, defaultValue, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return NumericFlagResolutionApi;
}(base_1.BaseAPI));
exports.NumericFlagResolutionApi = NumericFlagResolutionApi;
/**
 * ObjectFlagResolutionApi - axios parameter creator
 * @export
 */
var ObjectFlagResolutionApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {{ [key: string]: any; }} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveObject: function (flagKey, defaultValue, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'flagKey' is not null or undefined
                    (0, common_1.assertParamExists)('resolveObject', 'flagKey', flagKey);
                    // verify required parameter 'defaultValue' is not null or undefined
                    (0, common_1.assertParamExists)('resolveObject', 'defaultValue', defaultValue);
                    localVarPath = "/flags/{flag-key}/resolve/object"
                        .replace("{".concat("flag-key", "}"), encodeURIComponent(String(flagKey)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (defaultValue !== undefined) {
                        localVarQueryParameter['default-value'] = defaultValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ObjectFlagResolutionApiAxiosParamCreator = ObjectFlagResolutionApiAxiosParamCreator;
/**
 * ObjectFlagResolutionApi - functional programming interface
 * @export
 */
var ObjectFlagResolutionApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ObjectFlagResolutionApiAxiosParamCreator)(configuration);
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {{ [key: string]: any; }} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveObject: function (flagKey, defaultValue, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.resolveObject(flagKey, defaultValue, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ObjectFlagResolutionApiFp = ObjectFlagResolutionApiFp;
/**
 * ObjectFlagResolutionApi - factory interface
 * @export
 */
var ObjectFlagResolutionApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ObjectFlagResolutionApiFp)(configuration);
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {{ [key: string]: any; }} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveObject: function (flagKey, defaultValue, requestBody, options) {
            return localVarFp.resolveObject(flagKey, defaultValue, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ObjectFlagResolutionApiFactory = ObjectFlagResolutionApiFactory;
/**
 * ObjectFlagResolutionApi - object-oriented interface
 * @export
 * @class ObjectFlagResolutionApi
 * @extends {BaseAPI}
 */
var ObjectFlagResolutionApi = /** @class */ (function (_super) {
    __extends(ObjectFlagResolutionApi, _super);
    function ObjectFlagResolutionApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {{ [key: string]: any; }} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectFlagResolutionApi
     */
    ObjectFlagResolutionApi.prototype.resolveObject = function (flagKey, defaultValue, requestBody, options) {
        var _this = this;
        return (0, exports.ObjectFlagResolutionApiFp)(this.configuration).resolveObject(flagKey, defaultValue, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ObjectFlagResolutionApi;
}(base_1.BaseAPI));
exports.ObjectFlagResolutionApi = ObjectFlagResolutionApi;
/**
 * StringFlagResolutionApi - axios parameter creator
 * @export
 */
var StringFlagResolutionApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {string} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveString: function (flagKey, defaultValue, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'flagKey' is not null or undefined
                    (0, common_1.assertParamExists)('resolveString', 'flagKey', flagKey);
                    // verify required parameter 'defaultValue' is not null or undefined
                    (0, common_1.assertParamExists)('resolveString', 'defaultValue', defaultValue);
                    localVarPath = "/flags/{flag-key}/resolve/string"
                        .replace("{".concat("flag-key", "}"), encodeURIComponent(String(flagKey)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (defaultValue !== undefined) {
                        localVarQueryParameter['default-value'] = defaultValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.StringFlagResolutionApiAxiosParamCreator = StringFlagResolutionApiAxiosParamCreator;
/**
 * StringFlagResolutionApi - functional programming interface
 * @export
 */
var StringFlagResolutionApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.StringFlagResolutionApiAxiosParamCreator)(configuration);
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {string} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveString: function (flagKey, defaultValue, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.resolveString(flagKey, defaultValue, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.StringFlagResolutionApiFp = StringFlagResolutionApiFp;
/**
 * StringFlagResolutionApi - factory interface
 * @export
 */
var StringFlagResolutionApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.StringFlagResolutionApiFp)(configuration);
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {string} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveString: function (flagKey, defaultValue, requestBody, options) {
            return localVarFp.resolveString(flagKey, defaultValue, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.StringFlagResolutionApiFactory = StringFlagResolutionApiFactory;
/**
 * StringFlagResolutionApi - object-oriented interface
 * @export
 * @class StringFlagResolutionApi
 * @extends {BaseAPI}
 */
var StringFlagResolutionApi = /** @class */ (function (_super) {
    __extends(StringFlagResolutionApi, _super);
    function StringFlagResolutionApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {string} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StringFlagResolutionApi
     */
    StringFlagResolutionApi.prototype.resolveString = function (flagKey, defaultValue, requestBody, options) {
        var _this = this;
        return (0, exports.StringFlagResolutionApiFp)(this.configuration).resolveString(flagKey, defaultValue, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StringFlagResolutionApi;
}(base_1.BaseAPI));
exports.StringFlagResolutionApi = StringFlagResolutionApi;
