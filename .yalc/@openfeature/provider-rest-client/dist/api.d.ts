/**
 * OpenFeature Provider REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * A logical identifier for the subject (end-user, service) of this flag evaluation.
 * @export
 * @interface Context
 */
export interface Context {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof Context
     */
    'targetingKey'?: string;
}
/**
 * The resolution details of the flag resolution operation.
 * @export
 * @interface ResolutionDetails
 */
export interface ResolutionDetails {
    /**
     *
     * @type {string}
     * @memberof ResolutionDetails
     */
    'variant'?: string;
    /**
     *
     * @type {string}
     * @memberof ResolutionDetails
     */
    'reason'?: string;
}
/**
 *
 * @export
 * @interface ResolutionDetailsBoolean
 */
export interface ResolutionDetailsBoolean {
    /**
     *
     * @type {string}
     * @memberof ResolutionDetailsBoolean
     */
    'variant'?: string;
    /**
     *
     * @type {string}
     * @memberof ResolutionDetailsBoolean
     */
    'reason'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ResolutionDetailsBoolean
     */
    'value': boolean;
}
/**
 *
 * @export
 * @interface ResolutionDetailsBooleanAllOf
 */
export interface ResolutionDetailsBooleanAllOf {
    /**
     *
     * @type {boolean}
     * @memberof ResolutionDetailsBooleanAllOf
     */
    'value': boolean;
}
/**
 *
 * @export
 * @interface ResolutionDetailsNumber
 */
export interface ResolutionDetailsNumber {
    /**
     *
     * @type {string}
     * @memberof ResolutionDetailsNumber
     */
    'variant'?: string;
    /**
     *
     * @type {string}
     * @memberof ResolutionDetailsNumber
     */
    'reason'?: string;
    /**
     *
     * @type {number}
     * @memberof ResolutionDetailsNumber
     */
    'value': number;
}
/**
 *
 * @export
 * @interface ResolutionDetailsNumberAllOf
 */
export interface ResolutionDetailsNumberAllOf {
    /**
     *
     * @type {number}
     * @memberof ResolutionDetailsNumberAllOf
     */
    'value': number;
}
/**
 *
 * @export
 * @interface ResolutionDetailsObject
 */
export interface ResolutionDetailsObject {
    /**
     *
     * @type {string}
     * @memberof ResolutionDetailsObject
     */
    'variant'?: string;
    /**
     *
     * @type {string}
     * @memberof ResolutionDetailsObject
     */
    'reason'?: string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof ResolutionDetailsObject
     */
    'value': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface ResolutionDetailsObjectAllOf
 */
export interface ResolutionDetailsObjectAllOf {
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof ResolutionDetailsObjectAllOf
     */
    'value': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface ResolutionDetailsString
 */
export interface ResolutionDetailsString {
    /**
     *
     * @type {string}
     * @memberof ResolutionDetailsString
     */
    'variant'?: string;
    /**
     *
     * @type {string}
     * @memberof ResolutionDetailsString
     */
    'reason'?: string;
    /**
     *
     * @type {string}
     * @memberof ResolutionDetailsString
     */
    'value': string;
}
/**
 *
 * @export
 * @interface ResolutionDetailsStringAllOf
 */
export interface ResolutionDetailsStringAllOf {
    /**
     *
     * @type {string}
     * @memberof ResolutionDetailsStringAllOf
     */
    'value': string;
}
/**
 *
 * @export
 * @interface ResolutionDetailsWithError
 */
export interface ResolutionDetailsWithError {
    /**
     *
     * @type {string}
     * @memberof ResolutionDetailsWithError
     */
    'variant'?: string;
    /**
     *
     * @type {string}
     * @memberof ResolutionDetailsWithError
     */
    'reason'?: string;
    /**
     *
     * @type {string}
     * @memberof ResolutionDetailsWithError
     */
    'errorCode'?: string;
}
/**
 *
 * @export
 * @interface ResolutionDetailsWithErrorAllOf
 */
export interface ResolutionDetailsWithErrorAllOf {
    /**
     *
     * @type {string}
     * @memberof ResolutionDetailsWithErrorAllOf
     */
    'errorCode'?: string;
}
/**
 * BooleanFlagResolutionApi - axios parameter creator
 * @export
 */
export declare const BooleanFlagResolutionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {boolean} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveBoolean: (flagKey: string, defaultValue: boolean, requestBody?: {
        [key: string]: any;
    }, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BooleanFlagResolutionApi - functional programming interface
 * @export
 */
export declare const BooleanFlagResolutionApiFp: (configuration?: Configuration) => {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {boolean} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveBoolean(flagKey: string, defaultValue: boolean, requestBody?: {
        [key: string]: any;
    }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResolutionDetailsBoolean>>;
};
/**
 * BooleanFlagResolutionApi - factory interface
 * @export
 */
export declare const BooleanFlagResolutionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {boolean} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveBoolean(flagKey: string, defaultValue: boolean, requestBody?: {
        [key: string]: any;
    }, options?: any): AxiosPromise<ResolutionDetailsBoolean>;
};
/**
 * BooleanFlagResolutionApi - object-oriented interface
 * @export
 * @class BooleanFlagResolutionApi
 * @extends {BaseAPI}
 */
export declare class BooleanFlagResolutionApi extends BaseAPI {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {boolean} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooleanFlagResolutionApi
     */
    resolveBoolean(flagKey: string, defaultValue: boolean, requestBody?: {
        [key: string]: any;
    }, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResolutionDetailsBoolean, any>>;
}
/**
 * NumericFlagResolutionApi - axios parameter creator
 * @export
 */
export declare const NumericFlagResolutionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {number} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveNumber: (flagKey: string, defaultValue: number, requestBody?: {
        [key: string]: any;
    }, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NumericFlagResolutionApi - functional programming interface
 * @export
 */
export declare const NumericFlagResolutionApiFp: (configuration?: Configuration) => {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {number} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveNumber(flagKey: string, defaultValue: number, requestBody?: {
        [key: string]: any;
    }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResolutionDetailsNumber>>;
};
/**
 * NumericFlagResolutionApi - factory interface
 * @export
 */
export declare const NumericFlagResolutionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {number} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveNumber(flagKey: string, defaultValue: number, requestBody?: {
        [key: string]: any;
    }, options?: any): AxiosPromise<ResolutionDetailsNumber>;
};
/**
 * NumericFlagResolutionApi - object-oriented interface
 * @export
 * @class NumericFlagResolutionApi
 * @extends {BaseAPI}
 */
export declare class NumericFlagResolutionApi extends BaseAPI {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {number} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NumericFlagResolutionApi
     */
    resolveNumber(flagKey: string, defaultValue: number, requestBody?: {
        [key: string]: any;
    }, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResolutionDetailsNumber, any>>;
}
/**
 * ObjectFlagResolutionApi - axios parameter creator
 * @export
 */
export declare const ObjectFlagResolutionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {{ [key: string]: any; }} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveObject: (flagKey: string, defaultValue: {
        [key: string]: any;
    }, requestBody?: {
        [key: string]: any;
    }, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ObjectFlagResolutionApi - functional programming interface
 * @export
 */
export declare const ObjectFlagResolutionApiFp: (configuration?: Configuration) => {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {{ [key: string]: any; }} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveObject(flagKey: string, defaultValue: {
        [key: string]: any;
    }, requestBody?: {
        [key: string]: any;
    }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResolutionDetailsObject>>;
};
/**
 * ObjectFlagResolutionApi - factory interface
 * @export
 */
export declare const ObjectFlagResolutionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {{ [key: string]: any; }} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveObject(flagKey: string, defaultValue: {
        [key: string]: any;
    }, requestBody?: {
        [key: string]: any;
    }, options?: any): AxiosPromise<ResolutionDetailsObject>;
};
/**
 * ObjectFlagResolutionApi - object-oriented interface
 * @export
 * @class ObjectFlagResolutionApi
 * @extends {BaseAPI}
 */
export declare class ObjectFlagResolutionApi extends BaseAPI {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {{ [key: string]: any; }} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectFlagResolutionApi
     */
    resolveObject(flagKey: string, defaultValue: {
        [key: string]: any;
    }, requestBody?: {
        [key: string]: any;
    }, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResolutionDetailsObject, any>>;
}
/**
 * StringFlagResolutionApi - axios parameter creator
 * @export
 */
export declare const StringFlagResolutionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {string} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveString: (flagKey: string, defaultValue: string, requestBody?: {
        [key: string]: any;
    }, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StringFlagResolutionApi - functional programming interface
 * @export
 */
export declare const StringFlagResolutionApiFp: (configuration?: Configuration) => {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {string} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveString(flagKey: string, defaultValue: string, requestBody?: {
        [key: string]: any;
    }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResolutionDetailsString>>;
};
/**
 * StringFlagResolutionApi - factory interface
 * @export
 */
export declare const StringFlagResolutionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {string} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveString(flagKey: string, defaultValue: string, requestBody?: {
        [key: string]: any;
    }, options?: any): AxiosPromise<ResolutionDetailsString>;
};
/**
 * StringFlagResolutionApi - object-oriented interface
 * @export
 * @class StringFlagResolutionApi
 * @extends {BaseAPI}
 */
export declare class StringFlagResolutionApi extends BaseAPI {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {string} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StringFlagResolutionApi
     */
    resolveString(flagKey: string, defaultValue: string, requestBody?: {
        [key: string]: any;
    }, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResolutionDetailsString, any>>;
}
