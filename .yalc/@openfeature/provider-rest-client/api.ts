/* tslint:disable */
/* eslint-disable */
/**
 * OpenFeature Provider REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * A logical identifier for the subject (end-user, service) of this flag evaluation.
 * @export
 * @interface Context
 */
export interface Context {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof Context
     */
    'targetingKey'?: string;
}
/**
 * The resolution details of the flag resolution operation.
 * @export
 * @interface ResolutionDetails
 */
export interface ResolutionDetails {
    /**
     * 
     * @type {string}
     * @memberof ResolutionDetails
     */
    'variant'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResolutionDetails
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface ResolutionDetailsBoolean
 */
export interface ResolutionDetailsBoolean {
    /**
     * 
     * @type {string}
     * @memberof ResolutionDetailsBoolean
     */
    'variant'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResolutionDetailsBoolean
     */
    'reason'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ResolutionDetailsBoolean
     */
    'value': boolean;
}
/**
 * 
 * @export
 * @interface ResolutionDetailsBooleanAllOf
 */
export interface ResolutionDetailsBooleanAllOf {
    /**
     * 
     * @type {boolean}
     * @memberof ResolutionDetailsBooleanAllOf
     */
    'value': boolean;
}
/**
 * 
 * @export
 * @interface ResolutionDetailsNumber
 */
export interface ResolutionDetailsNumber {
    /**
     * 
     * @type {string}
     * @memberof ResolutionDetailsNumber
     */
    'variant'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResolutionDetailsNumber
     */
    'reason'?: string;
    /**
     * 
     * @type {number}
     * @memberof ResolutionDetailsNumber
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface ResolutionDetailsNumberAllOf
 */
export interface ResolutionDetailsNumberAllOf {
    /**
     * 
     * @type {number}
     * @memberof ResolutionDetailsNumberAllOf
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface ResolutionDetailsObject
 */
export interface ResolutionDetailsObject {
    /**
     * 
     * @type {string}
     * @memberof ResolutionDetailsObject
     */
    'variant'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResolutionDetailsObject
     */
    'reason'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ResolutionDetailsObject
     */
    'value': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface ResolutionDetailsObjectAllOf
 */
export interface ResolutionDetailsObjectAllOf {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ResolutionDetailsObjectAllOf
     */
    'value': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface ResolutionDetailsString
 */
export interface ResolutionDetailsString {
    /**
     * 
     * @type {string}
     * @memberof ResolutionDetailsString
     */
    'variant'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResolutionDetailsString
     */
    'reason'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResolutionDetailsString
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface ResolutionDetailsStringAllOf
 */
export interface ResolutionDetailsStringAllOf {
    /**
     * 
     * @type {string}
     * @memberof ResolutionDetailsStringAllOf
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface ResolutionDetailsWithError
 */
export interface ResolutionDetailsWithError {
    /**
     * 
     * @type {string}
     * @memberof ResolutionDetailsWithError
     */
    'variant'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResolutionDetailsWithError
     */
    'reason'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResolutionDetailsWithError
     */
    'errorCode'?: string;
}
/**
 * 
 * @export
 * @interface ResolutionDetailsWithErrorAllOf
 */
export interface ResolutionDetailsWithErrorAllOf {
    /**
     * 
     * @type {string}
     * @memberof ResolutionDetailsWithErrorAllOf
     */
    'errorCode'?: string;
}

/**
 * BooleanFlagResolutionApi - axios parameter creator
 * @export
 */
export const BooleanFlagResolutionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {boolean} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveBoolean: async (flagKey: string, defaultValue: boolean, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flagKey' is not null or undefined
            assertParamExists('resolveBoolean', 'flagKey', flagKey)
            // verify required parameter 'defaultValue' is not null or undefined
            assertParamExists('resolveBoolean', 'defaultValue', defaultValue)
            const localVarPath = `/flags/{flag-key}/resolve/boolean`
                .replace(`{${"flag-key"}}`, encodeURIComponent(String(flagKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (defaultValue !== undefined) {
                localVarQueryParameter['default-value'] = defaultValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BooleanFlagResolutionApi - functional programming interface
 * @export
 */
export const BooleanFlagResolutionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BooleanFlagResolutionApiAxiosParamCreator(configuration)
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {boolean} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveBoolean(flagKey: string, defaultValue: boolean, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResolutionDetailsBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resolveBoolean(flagKey, defaultValue, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BooleanFlagResolutionApi - factory interface
 * @export
 */
export const BooleanFlagResolutionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BooleanFlagResolutionApiFp(configuration)
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {boolean} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveBoolean(flagKey: string, defaultValue: boolean, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<ResolutionDetailsBoolean> {
            return localVarFp.resolveBoolean(flagKey, defaultValue, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BooleanFlagResolutionApi - object-oriented interface
 * @export
 * @class BooleanFlagResolutionApi
 * @extends {BaseAPI}
 */
export class BooleanFlagResolutionApi extends BaseAPI {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {boolean} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooleanFlagResolutionApi
     */
    public resolveBoolean(flagKey: string, defaultValue: boolean, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return BooleanFlagResolutionApiFp(this.configuration).resolveBoolean(flagKey, defaultValue, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NumericFlagResolutionApi - axios parameter creator
 * @export
 */
export const NumericFlagResolutionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {number} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveNumber: async (flagKey: string, defaultValue: number, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flagKey' is not null or undefined
            assertParamExists('resolveNumber', 'flagKey', flagKey)
            // verify required parameter 'defaultValue' is not null or undefined
            assertParamExists('resolveNumber', 'defaultValue', defaultValue)
            const localVarPath = `/flags/{flag-key}/resolve/number`
                .replace(`{${"flag-key"}}`, encodeURIComponent(String(flagKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (defaultValue !== undefined) {
                localVarQueryParameter['default-value'] = defaultValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NumericFlagResolutionApi - functional programming interface
 * @export
 */
export const NumericFlagResolutionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NumericFlagResolutionApiAxiosParamCreator(configuration)
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {number} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveNumber(flagKey: string, defaultValue: number, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResolutionDetailsNumber>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resolveNumber(flagKey, defaultValue, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NumericFlagResolutionApi - factory interface
 * @export
 */
export const NumericFlagResolutionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NumericFlagResolutionApiFp(configuration)
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {number} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveNumber(flagKey: string, defaultValue: number, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<ResolutionDetailsNumber> {
            return localVarFp.resolveNumber(flagKey, defaultValue, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NumericFlagResolutionApi - object-oriented interface
 * @export
 * @class NumericFlagResolutionApi
 * @extends {BaseAPI}
 */
export class NumericFlagResolutionApi extends BaseAPI {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {number} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NumericFlagResolutionApi
     */
    public resolveNumber(flagKey: string, defaultValue: number, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return NumericFlagResolutionApiFp(this.configuration).resolveNumber(flagKey, defaultValue, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ObjectFlagResolutionApi - axios parameter creator
 * @export
 */
export const ObjectFlagResolutionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {{ [key: string]: any; }} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveObject: async (flagKey: string, defaultValue: { [key: string]: any; }, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flagKey' is not null or undefined
            assertParamExists('resolveObject', 'flagKey', flagKey)
            // verify required parameter 'defaultValue' is not null or undefined
            assertParamExists('resolveObject', 'defaultValue', defaultValue)
            const localVarPath = `/flags/{flag-key}/resolve/object`
                .replace(`{${"flag-key"}}`, encodeURIComponent(String(flagKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (defaultValue !== undefined) {
                localVarQueryParameter['default-value'] = defaultValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectFlagResolutionApi - functional programming interface
 * @export
 */
export const ObjectFlagResolutionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectFlagResolutionApiAxiosParamCreator(configuration)
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {{ [key: string]: any; }} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveObject(flagKey: string, defaultValue: { [key: string]: any; }, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResolutionDetailsObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resolveObject(flagKey, defaultValue, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObjectFlagResolutionApi - factory interface
 * @export
 */
export const ObjectFlagResolutionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectFlagResolutionApiFp(configuration)
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {{ [key: string]: any; }} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveObject(flagKey: string, defaultValue: { [key: string]: any; }, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<ResolutionDetailsObject> {
            return localVarFp.resolveObject(flagKey, defaultValue, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectFlagResolutionApi - object-oriented interface
 * @export
 * @class ObjectFlagResolutionApi
 * @extends {BaseAPI}
 */
export class ObjectFlagResolutionApi extends BaseAPI {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {{ [key: string]: any; }} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectFlagResolutionApi
     */
    public resolveObject(flagKey: string, defaultValue: { [key: string]: any; }, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return ObjectFlagResolutionApiFp(this.configuration).resolveObject(flagKey, defaultValue, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StringFlagResolutionApi - axios parameter creator
 * @export
 */
export const StringFlagResolutionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {string} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveString: async (flagKey: string, defaultValue: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flagKey' is not null or undefined
            assertParamExists('resolveString', 'flagKey', flagKey)
            // verify required parameter 'defaultValue' is not null or undefined
            assertParamExists('resolveString', 'defaultValue', defaultValue)
            const localVarPath = `/flags/{flag-key}/resolve/string`
                .replace(`{${"flag-key"}}`, encodeURIComponent(String(flagKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (defaultValue !== undefined) {
                localVarQueryParameter['default-value'] = defaultValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StringFlagResolutionApi - functional programming interface
 * @export
 */
export const StringFlagResolutionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StringFlagResolutionApiAxiosParamCreator(configuration)
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {string} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveString(flagKey: string, defaultValue: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResolutionDetailsString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resolveString(flagKey, defaultValue, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StringFlagResolutionApi - factory interface
 * @export
 */
export const StringFlagResolutionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StringFlagResolutionApiFp(configuration)
    return {
        /**
         * Resolve a flag value
         * @param {string} flagKey A logical identifier for the flag.
         * @param {string} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveString(flagKey: string, defaultValue: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<ResolutionDetailsString> {
            return localVarFp.resolveString(flagKey, defaultValue, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StringFlagResolutionApi - object-oriented interface
 * @export
 * @class StringFlagResolutionApi
 * @extends {BaseAPI}
 */
export class StringFlagResolutionApi extends BaseAPI {
    /**
     * Resolve a flag value
     * @param {string} flagKey A logical identifier for the flag.
     * @param {string} defaultValue The value that will be resolved in case of any error, or if the flag is not defined in the flag management system.
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StringFlagResolutionApi
     */
    public resolveString(flagKey: string, defaultValue: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return StringFlagResolutionApiFp(this.configuration).resolveString(flagKey, defaultValue, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


