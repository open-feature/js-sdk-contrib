// @generated by protobuf-ts 2.2.2 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "schema/v1/schema.proto" (package "schema.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Service } from "./schema";
import type { ResolveObjectResponse } from "./schema";
import type { ResolveObjectRequest } from "./schema";
import type { ResolveNumberResponse } from "./schema";
import type { ResolveNumberRequest } from "./schema";
import type { ResolveStringResponse } from "./schema";
import type { ResolveStringRequest } from "./schema";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ResolveBooleanResponse } from "./schema";
import type { ResolveBooleanRequest } from "./schema";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service schema.v1.Service
 */
export interface IServiceClient {
    /**
     * @generated from protobuf rpc: ResolveBoolean(schema.v1.ResolveBooleanRequest) returns (schema.v1.ResolveBooleanResponse);
     */
    resolveBoolean(input: ResolveBooleanRequest, options?: RpcOptions): UnaryCall<ResolveBooleanRequest, ResolveBooleanResponse>;
    /**
     * @generated from protobuf rpc: ResolveString(schema.v1.ResolveStringRequest) returns (schema.v1.ResolveStringResponse);
     */
    resolveString(input: ResolveStringRequest, options?: RpcOptions): UnaryCall<ResolveStringRequest, ResolveStringResponse>;
    /**
     * @generated from protobuf rpc: ResolveNumber(schema.v1.ResolveNumberRequest) returns (schema.v1.ResolveNumberResponse);
     */
    resolveNumber(input: ResolveNumberRequest, options?: RpcOptions): UnaryCall<ResolveNumberRequest, ResolveNumberResponse>;
    /**
     * @generated from protobuf rpc: ResolveObject(schema.v1.ResolveObjectRequest) returns (schema.v1.ResolveObjectResponse);
     */
    resolveObject(input: ResolveObjectRequest, options?: RpcOptions): UnaryCall<ResolveObjectRequest, ResolveObjectResponse>;
}
/**
 * @generated from protobuf service schema.v1.Service
 */
export class ServiceClient implements IServiceClient, ServiceInfo {
    typeName = Service.typeName;
    methods = Service.methods;
    options = Service.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ResolveBoolean(schema.v1.ResolveBooleanRequest) returns (schema.v1.ResolveBooleanResponse);
     */
    resolveBoolean(input: ResolveBooleanRequest, options?: RpcOptions): UnaryCall<ResolveBooleanRequest, ResolveBooleanResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResolveBooleanRequest, ResolveBooleanResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ResolveString(schema.v1.ResolveStringRequest) returns (schema.v1.ResolveStringResponse);
     */
    resolveString(input: ResolveStringRequest, options?: RpcOptions): UnaryCall<ResolveStringRequest, ResolveStringResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResolveStringRequest, ResolveStringResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ResolveNumber(schema.v1.ResolveNumberRequest) returns (schema.v1.ResolveNumberResponse);
     */
    resolveNumber(input: ResolveNumberRequest, options?: RpcOptions): UnaryCall<ResolveNumberRequest, ResolveNumberResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResolveNumberRequest, ResolveNumberResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ResolveObject(schema.v1.ResolveObjectRequest) returns (schema.v1.ResolveObjectResponse);
     */
    resolveObject(input: ResolveObjectRequest, options?: RpcOptions): UnaryCall<ResolveObjectRequest, ResolveObjectResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResolveObjectRequest, ResolveObjectResponse>("unary", this._transport, method, opt, input);
    }
}
